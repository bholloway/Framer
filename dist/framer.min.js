(function (window) {
"use strict";
function Frame(e,t,i,r){this.type=e,this.name=t,this.src=i,this.options=r,this.frameElement=void 0}function FrameMessage(e,t,i,r,s){this.type=e,this.data=t,this.origin=i,this.target=r,this.messenger=s}window.framer={Manager:Manager,Client:Client,domLog:domLog};var FramerClientMessengerType="frame-client",FramerMessengerType="framer";
function closeFrameWindow(e){setTimeout(function(){try{e.frameElement.src="about:blank"}catch(t){}setTimeout(function(){e.frameElement.parentNode.removeChild(e.frameElement),e.frameElement=void 0},100)},0)}function createUrlArgs(e){var t=[],n=Object.getOwnPropertyNames(e);return n.forEach(function(n){var r=n+"="+encodeURI(e[n]);t.push(r)}),t.join("&")}function mergeOptions(e,t){var n=Object.getOwnPropertyNames(t);n.forEach(function(n){"undefined"==typeof e[n]&&(e[n]=t[n])})}function filterByKeyValue(e,t,n,r){var o,a=e.filter(function(e){return e[t]===n});if(a.length>0){var i=0;r&&(i=a.length-1),o=a[i]}return o}function parseParams(e){e=e||resolveHashSearch();var t=[],n=parseUris(e);for(var r in n)t.push({name:r,data:n[r]});return t}function resolveHashSearch(){if(""!==document.location.search)return document.location.search;var e=document.location.hash,t=e.substring(e.indexOf("?")+1,e.length);return t}function tryDecodeURIComponent(e){try{return decodeURIComponent(e)}catch(t){console.error("There was an issue parsing the uri segment, check your iframe src",t)}}function parseUris(e){e=e.replace(/^\?/,"");for(var t,n,r={},o=(e||"").split("&"),a=0;a<o.length;a++){var i=o[a];if(i&&(t=i.replace(/\+/g,"%20").split("="),n=tryDecodeURIComponent(t[0]),isDefined(n))){var s=isDefined(t[1])?tryDecodeURIComponent(t[1]):!0;hasOwnProperty.call(r,n)?isArray(r[n])?r[n].push(s):r[n]=[r[n],s]:r[n]=s}}return r}function prependElement(e,t){return e.insertBefore(t,e.firstChild)}function setElementStyles(e,t){for(var n in t)e.style[n]=t[n]}function setElementAttributes(e,t){for(var n in t)e.setAttribute(n,t[n]);return e}function elementExistsByClassName(e){var t=window.document.getElementsByClassName(e);return t.length>0}function isDefined(e){return"undefined"!=typeof e}function domLog(e,t){var n="dom-log",r=document.getElementsByClassName(n)[0];r||(r=document.createElement("div"),r.className=n,r.style.position="absolute",r.style.top="0",r.style.right="0",prependElement(window.document.body,r));var o=document.createElement("p");o.innerText=e,o.style.color=t,o.style.fontSize="0.5em",r.appendChild(o)}
function Manager(e){this.name=e,this.frames=[],this.handlers=[],this.focus=null,this.zIndex=99999,this.container=this.createFrameContainer(this.name),this.style={position:"fixed",top:"0px",left:"0px",bottom:"0px",right:"0px",width:"100%",height:"100%",border:"none",margin:"0",padding:"0",overflow:"hidden"},this.receiveMessage=function(e){e.origin===document.location.origin&&(e.data.messenger!==FramerClientMessengerType||e.data.target!==this.name&&"undefined"!=typeof e.data.target||this.handleMessage(e.data))}.bind(this),window.addEventListener("message",this.receiveMessage,!1)}Manager.prototype.send=function(e,t,n){var a=new FrameMessage(e,t,this.name,n,FramerMessengerType);window.postMessage(a,document.location.origin)},Manager.prototype.receive=function(e,t){filterByKeyValue(this.handlers,"type",e)?console.error("You already have a callback for type",e):this.handlers.push({type:e,callback:t})},Manager.prototype.add=function(e,t,n){var a=filterByKeyValue(this.frames,"name",e);if(a)return console.warn("Manager.add() there is already a frame named",e,"in the framer",this.name),a;n=n||{},isDefined(n.style)||(n.style=this.style),isDefined(n.append)||(n.append=!0);var r=new Frame(FramerClientMessengerType,e,t,n);return this.frames.push(r),r},Manager.prototype.open=function(e,t){var n=this.getFrame(e);return n?(this.focus&&this.focus!==n&&this.closeFrame(this.focus),this.focus=n,t&&mergeOptions(this.focus.options,t),this.openFrame(this.focus),n):void console.error("Manager open() there is no frame with that name",e)},Manager.prototype.openAbove=function(e,t){t=t||{},t.style=t.style||{};var n=this.getFrame(e);return n?(t.style.zIndex||(t.style.zIndex=n.style.zIndex+1),this.openFrame(n,t),n):void console.error("Manager open() there is no frame with that name",e)},Manager.prototype.close=function(e){var t=this.getFrame(e);return t?(this.closeFrame(t),void(this.focus=null)):void console.warn("Manager close() there is no frame with that name",e)},Manager.prototype.handleMessage=function(e){var t=filterByKeyValue(this.handlers,"type",e.type);t&&t.callback.apply(this,[e.data])},Manager.prototype.openFrame=function(e,t){if(t&&mergeOptions(e.options,t),e.frameElement)console.warn("Manager",this.name,"already has",e.name,"open");else if(this.createFrameElement(e),e.options.append){var n=this.container;e.options.parent&&(n=e.options.parent),prependElement(n,e.frameElement)}},Manager.prototype.closeFrame=function(e){if(e.frameElement){var t=e.frameElement.contentWindow;console.log("frame options",e.options),e.options.angularAppId&&t.angular?angularCloseFrameWindow(e):closeFrameWindow(e)}else console.warn("Manager",this.name,"frame",e.name,"is not open to close")},Manager.prototype.getFrame=function(e){var t;return"string"==typeof e?t=this.getFrameByName(e):Object.getOwnPropertyNames(e).name&&(t=this.frames.indexOf(e)),t},Manager.prototype.getFrameByName=function(e){var t,n=this.frames.filter(function(t){return t.name===e});return n.length>0&&(t=n[0]),t},Manager.prototype.createFrameElement=function(e){var t=e.src,n=e.options;n.arguments=n.arguments||{},n.style=n.style||{},n.attributes=n.attributes||{};var a=createUrlArgs(n.arguments),r="&name="+e.name+"&"+a,o="?origin="+encodeURIComponent(document.location.href),s=document.createElement("iframe");return setElementStyles(s,n.style),setElementAttributes(s,n.attributes),s.id=e.name,s.src=t+o+r,s.sandbox="allow-forms allow-scripts allow-same-origin",e.frameElement=s,e},Manager.prototype.createFrameContainer=function(e){var t;return elementExistsByClassName(e)||(t=window.document.createElement("div"),t.className=e,t.style.position="fixed",t.style.top=0,t.style.left=0,t.style.zIndex=this.zIndex,prependElement(window.document.body,t)),t};
function Client(){this.handlers=[],this.params=parseParams();var e=filterByKeyValue(this.params,"name","name",!0),a=filterByKeyValue(this.params,"name","origin");return isDefined(e)&&isDefined(a)?(this.name=e.data,this.origin=a.data,this.receiveMessage=function(e){e.origin===document.location.origin&&(e.data.messenger!==FramerMessengerType||e.data.target!==this.name&&"undefined"!=typeof e.data.target||this.handleMessage(e.data))}.bind(this),void window.parent.window.addEventListener("message",this.receiveMessage,!1)):void console.info("Manager will not work without the correct origin and name url args")}Client.prototype.handleMessage=function(e){var a=filterByKeyValue(this.handlers,"type",e.type);a&&a.callback.apply(this,[e.data])},Client.prototype.send=function(e,a,t){var i=new FrameMessage(e,a,this.name,t,FramerClientMessengerType);window.parent.postMessage(i,this.origin)},Client.prototype.receive=function(e,a){filterByKeyValue(this.handlers,"type",e)?console.error("You already have a callback for type",name):this.handlers.push({type:e,callback:a})};
function angularCloseFrameWindow(e){function n(){var n=a.get("$rootScope");n.$broadcast("$destroy"),setTimeout(function(){closeFrameWindow(e)},0)}var o=e.frameElement.contentWindow,t=o.angular.element(o.document.getElementById(e.options.angularAppId));console.log("ngApp",t);var a=o.angular.element(t).injector();n()}
})(window);
//# sourceMappingURL=data:application/json;base64,