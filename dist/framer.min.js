/*

 JS Signals <http://millermedeiros.github.com/js-signals/>
 Released under the MIT license
 Author: Miller Medeiros
 Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
*/
(function(i){function h(a,b,c,d,e){this._listener=b;this._isOnce=c;this.context=d;this._signal=a;this._priority=e||0}function g(a,b){if(typeof a!=="function")throw Error("listener is a required param of {fn}() and should be a Function.".replace("{fn}",b));}function e(){this._bindings=[];this._prevParams=null;var a=this;this.dispatch=function(){e.prototype.dispatch.apply(a,arguments)}}h.prototype={active:!0,params:null,execute:function(a){var b;this.active&&this._listener&&(a=this.params?this.params.concat(a):
a,b=this._listener.apply(this.context,a),this._isOnce&&this.detach());return b},detach:function(){return this.isBound()?this._signal.remove(this._listener,this.context):null},isBound:function(){return!!this._signal&&!!this._listener},isOnce:function(){return this._isOnce},getListener:function(){return this._listener},getSignal:function(){return this._signal},_destroy:function(){delete this._signal;delete this._listener;delete this.context},toString:function(){return"[SignalBinding isOnce:"+this._isOnce+
", isBound:"+this.isBound()+", active:"+this.active+"]"}};e.prototype={VERSION:"1.0.0",memorize:!1,_shouldPropagate:!0,active:!0,_registerListener:function(a,b,c,d){var e=this._indexOfListener(a,c);if(e!==-1){if(a=this._bindings[e],a.isOnce()!==b)throw Error("You cannot add"+(b?"":"Once")+"() then add"+(!b?"":"Once")+"() the same listener without removing the relationship first.");}else a=new h(this,a,b,c,d),this._addBinding(a);this.memorize&&this._prevParams&&a.execute(this._prevParams);return a},
_addBinding:function(a){var b=this._bindings.length;do--b;while(this._bindings[b]&&a._priority<=this._bindings[b]._priority);this._bindings.splice(b+1,0,a)},_indexOfListener:function(a,b){for(var c=this._bindings.length,d;c--;)if(d=this._bindings[c],d._listener===a&&d.context===b)return c;return-1},has:function(a,b){return this._indexOfListener(a,b)!==-1},add:function(a,b,c){g(a,"add");return this._registerListener(a,!1,b,c)},addOnce:function(a,b,c){g(a,"addOnce");return this._registerListener(a,
!0,b,c)},remove:function(a,b){g(a,"remove");var c=this._indexOfListener(a,b);c!==-1&&(this._bindings[c]._destroy(),this._bindings.splice(c,1));return a},removeAll:function(){for(var a=this._bindings.length;a--;)this._bindings[a]._destroy();this._bindings.length=0},getNumListeners:function(){return this._bindings.length},halt:function(){this._shouldPropagate=!1},dispatch:function(a){if(this.active){var b=Array.prototype.slice.call(arguments),c=this._bindings.length,d;if(this.memorize)this._prevParams=
b;if(c){d=this._bindings.slice();this._shouldPropagate=!0;do c--;while(d[c]&&this._shouldPropagate&&d[c].execute(b)!==!1)}}},forget:function(){this._prevParams=null},dispose:function(){this.removeAll();delete this._bindings;delete this._prevParams},toString:function(){return"[Signal active:"+this.active+" numListeners:"+this.getNumListeners()+"]"}};var f=e;f.Signal=e;typeof define==="function"&&define.amd?define(function(){return f}):typeof module!=="undefined"&&module.exports?module.exports=f:i.signals=
f})(this);

(function (window) {
"use strict";
function Frame(e,t,a,i){this.type=e,this.name=t,this.src=a,this.options=i,this.frameElement=void 0}function FrameMessage(e,t,a,i,s){this.type=e,this.data=t,this.origin=a,this.target=i,this.messenger=s}window.framer={managers:[],Manager:Manager,Client:Client,domLog:domLog};var ClientMessage="client",ManagerMessage="manager";
function closeFrameWindow(e){setTimeout(function(){try{e.frameElement.src="about:blank"}catch(t){}setTimeout(function(){e.frameElement.parentNode.removeChild(e.frameElement),e.frameElement=void 0},100)},0)}function createUrlArgs(e){var t=[],n=Object.getOwnPropertyNames(e);return n.forEach(function(n){var r=n+"="+encodeURI(e[n]);t.push(r)}),t.join("&")}function mergeOptions(e,t){var n=Object.getOwnPropertyNames(t);n.forEach(function(n){"undefined"==typeof e[n]&&(e[n]=t[n])})}function filterByKeyValue(e,t,n,r){var o,a=e.filter(function(e){return e[t]===n});if(a.length>0){var i=0;r&&(i=a.length-1),o=a[i]}return o}function parseParams(e){e=e||resolveHashSearch();var t=[],n=parseUris(e);for(var r in n)t.push({name:r,data:n[r]});return t}function resolveHashSearch(){if(""!==document.location.search)return document.location.search;var e=document.location.hash,t=e.substring(e.indexOf("?")+1,e.length);return t}function tryDecodeURIComponent(e){try{return decodeURIComponent(e)}catch(t){console.error("There was an issue parsing the uri segment, check your iframe src",t)}}function parseUris(e){e=e.replace(/^\?/,"");for(var t,n,r={},o=(e||"").split("&"),a=0;a<o.length;a++){var i=o[a];if(i&&(t=i.replace(/\+/g,"%20").split("="),n=tryDecodeURIComponent(t[0]),isDefined(n))){var s=isDefined(t[1])?tryDecodeURIComponent(t[1]):!0;hasOwnProperty.call(r,n)?isArray(r[n])?r[n].push(s):r[n]=[r[n],s]:r[n]=s}}return r}function prependElement(e,t){return e.insertBefore(t,e.firstChild)}function setElementStyles(e,t){for(var n in t)e.style[n]=t[n]}function setElementAttributes(e,t){for(var n in t)e.setAttribute(n,t[n]);return e}function elementExistsByClassName(e){var t=window.document.getElementsByClassName(e);return t.length>0}function isDefined(e){return"undefined"!=typeof e}function domLog(e,t){var n="dom-log",r=document.getElementsByClassName(n)[0];r||(r=document.createElement("div"),r.className=n,r.style.position="absolute",r.style.top="0",r.style.right="0",prependElement(window.document.body,r));var o=document.createElement("p");o.innerText=e,o.style.color=t,o.style.fontSize="0.5em",r.appendChild(o)}
function Manager(e,t){this.name=e,this.frames=[],this.handlers=[],this.focus=null,this.persistentFrame=null,this.zIndex=99999,t&&t.container?(this.container=t.container,this.container.className+=" "+this.name):this.container=this.createFrameContainer(this.name),this.style={position:"fixed",top:"0px",left:"0px",bottom:"0px",right:"0px",width:"100%",height:"100%",border:"none",margin:"0",padding:"0",overflow:"hidden"},this.listen();var n=signals.Signal;this.closed=new n,this.opened=new n,window.framer.managers.push(this)}Manager.prototype.receiveMessage=function(e){e.origin===document.location.origin&&(e.data.messenger!==ClientMessage||e.data.target!==this.name&&"undefined"!=typeof e.data.target||this.handleMessage(e.data))},Manager.prototype.destroy=function(){this.unListen()},Manager.prototype.listen=function(){this.listener=function(e){this.receiveMessage(e)}.bind(this),window.top.addEventListener("message",this.listener,!1)},Manager.prototype.unListen=function(){window.top.removeEventListener("message",this.listener),this.listener=void 0},Manager.prototype.send=function(e,t,n){var s=new FrameMessage(e,t,this.name,n,ManagerMessage);window.top.postMessage(s,document.location.origin)},Manager.prototype.on=function(e,t){filterByKeyValue(this.handlers,"type",e)?console.error("You already have a callback for type",e):this.handlers.push({type:e,callback:t})},Manager.prototype.add=function(e,t,n){var s=filterByKeyValue(this.frames,"name",e);if(s)return console.warn("Manager.add() there is already a frame named",e,"in the framer",this.name),s;n=n||{},isDefined(n.style)||(n.style=this.style),isDefined(n.append)||(n.append=!0),isDefined(n.persistent)||(n.persistent=!0);var a=new Frame(ClientMessage,e,t,n);return this.frames.push(a),a},Manager.prototype.open=function(e,t){var n=this.getFrame(e);return n?(this.focus&&this.focus!==n&&this.closeFrame(this.focus),this.focus=n,t&&mergeOptions(this.focus.options,t),this.openFrame(this.focus),this.opened.dispatch(n),n):void console.error("Manager open() there is no frame with that name",e)},Manager.prototype.openAbove=function(e,t){t=t||{},t.style=t.style||{};var n=this.getFrame(e);return n?(t.style.zIndex||(t.style.zIndex=n.style.zIndex+1),this.openFrame(n,t),n):void console.error("Manager open() there is no frame with that name",e)},Manager.prototype.close=function(e){var t=this.getFrame(e);return t?(this.closeFrame(t),this.focus=null,void this.closed.dispatch(t)):void console.warn("Manager close() there is no frame with that name",e)},Manager.prototype.handleMessage=function(e){var t=filterByKeyValue(this.handlers,"type",e.type);t&&t.callback.apply(this,[e.data])},Manager.prototype.openFrame=function(e,t){if(t&&mergeOptions(e.options,t),e.options.persistent)this.setPersistentFrame(e);else if(e.frameElement)console.warn("Manager",this.name,"already has",e.name,"open");else if(this.createFrameElement(e),e.options.append){var n=this.container;e.options.parent&&(n=e.options.parent),prependElement(n,e.frameElement)}},Manager.prototype.closeFrame=function(e){if(e.options.persistent&&null!==this.persistentFrame)this.persistentFrame.src="about:blank",this.persistentFrame.style.visibility="hidden";else if(e.frameElement){{e.frameElement.contentWindow}console.log("frame options",e.options),closeFrameWindow(e)}else console.warn("Manager",this.name,"frame",e.name,"is not open to close")},Manager.prototype.getFrame=function(e){var t;return"string"==typeof e?t=this.getFrameByName(e):Object.getOwnPropertyNames(e).name&&(t=this.frames.indexOf(e)),t},Manager.prototype.getFrameByName=function(e){var t,n=this.frames.filter(function(t){return t.name===e});return n.length>0&&(t=n[0]),t},Manager.prototype.setPersistentFrame=function(e){null===this.persistentFrame&&(this.persistentFrame=document.createElement("iframe"),prependElement(this.container,this.persistentFrame));var t=e.src,n=e.options;n.arguments=n.arguments||{},n.style=n.style||{},n.attributes=n.attributes||{};var s=createUrlArgs(n.arguments),a="&name="+e.name+"&"+s,r="?origin="+encodeURIComponent(document.location.href);setElementStyles(this.persistentFrame,n.style),setElementAttributes(this.persistentFrame,n.attributes),this.persistentFrame.id=e.name,this.persistentFrame.src=t+r+a,this.persistentFrame.style.visibility="visible",this.persistentFrame.sandbox="allow-forms allow-scripts allow-same-origin",e.frameElement=this.persistentFrame},Manager.prototype.createFrameElement=function(e){var t=e.src,n=e.options;n.arguments=n.arguments||{},n.style=n.style||{},n.attributes=n.attributes||{};var s=createUrlArgs(n.arguments),a="&name="+e.name+"&"+s,r="?origin="+encodeURIComponent(document.location.href),i=document.createElement("iframe");return setElementStyles(i,n.style),setElementAttributes(i,n.attributes),i.id=e.name,i.src=t+r+a,i.sandbox="allow-forms allow-scripts allow-same-origin",e.frameElement=i,e},Manager.prototype.createFrameContainer=function(e){var t;return elementExistsByClassName(e)||(t=window.document.createElement("div"),t.className=e,t.style.position="fixed",t.style.top=0,t.style.left=0,t.style.zIndex=this.zIndex,prependElement(window.document.body,t)),t};
function Client(){this.handlers=[],this.params=parseParams();var e=filterByKeyValue(this.params,"name","name",!0),t=filterByKeyValue(this.params,"name","origin");return isDefined(e)&&isDefined(t)?(this.name=e.data,this.origin=t.data,void this.listen()):void console.info("A Framer Client will not work without the correct origin and name url args, origin and name")}Client.prototype.receiveMessage=function(e){e&&e.origin&&e.origin!==window.top.document.location.origin||e.data.messenger!==ManagerMessage||e.data.target!==this.name&&"undefined"!=typeof e.data.target||this.handleMessage(e.data)},Client.prototype.destroy=function(){this.unListen()},Client.prototype.listen=function(){this.listener=function(e){this.receiveMessage(e)}.bind(this),window.top.addEventListener("message",this.listener,!1)},Client.prototype.unListen=function(){window.top.removeEventListener("message",this.listener),this.listener=void 0},Client.prototype.handleMessage=function(e){var t=filterByKeyValue(this.handlers,"type",e.type);t&&t.callback.apply(this,[e.data])},Client.prototype.send=function(e,t,i){var n=new FrameMessage(e,t,this.name,i,ClientMessage);window.top.postMessage(n,this.origin)},Client.prototype.on=function(e,t){filterByKeyValue(this.handlers,"type",e)?console.error("You already have a callback for type",name):this.handlers.push({type:e,callback:t})};
function angularCloseFrameWindow(e){function n(){var n=a.get("$rootScope");n.$broadcast("$destroy"),setTimeout(function(){closeFrameWindow(e)},0)}var o=e.frameElement.contentWindow,t=o.angular.element(o.document.getElementById(e.options.angularAppId));console.log("ngApp",t);var a=o.angular.element(t).injector();n()}
})(window);
//# sourceMappingURL=data:application/json;base64,