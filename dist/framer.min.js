(function (window) {
"use strict";

function Manager(e){this.name=e,this.frames=[],this.handlers=[],this.focus=null,this.zIndex=99999,this.container=this.createFrameContainer(this.name),this.style={position:"fixed",top:"0px",left:"0px",bottom:"0px",right:"0px",width:"100%",height:"100%",border:"none",margin:"0",padding:"0",overflow:"hidden"},this.receiveMessage=function(e){e.origin===document.location.origin&&(e.data.messenger!==FramerClientMessengerType||e.data.target!==this.name&&"undefined"!=typeof e.data.target||this.handleMessage(e.data))}.bind(this),window.addEventListener("message",this.receiveMessage,!1)}function angularCloseFrameWindow(e){function t(){var t=a.get("$rootScope");t.$broadcast("$destroy"),setTimeout(function(){closeFrameWindow(e)},0)}var n=e.frameElement.contentWindow,r=n.angular.element(n.document.getElementById(e.options.angularAppId));console.log("ngApp",r);var a=n.angular.element(r).injector();t()}function closeFrameWindow(e){setTimeout(function(){try{e.frameElement.src="about:blank"}catch(t){}setTimeout(function(){e.frameElement.parentNode.removeChild(e.frameElement),e.frameElement=void 0},100)},0)}function Frame(e,t,n,r){this.type=e,this.name=t,this.src=n,this.options=r,this.frameElement=void 0}function Client(){this.handlers=[],this.params=parseParams();var e=filterByKeyValue(this.params,"name","name",!0),t=filterByKeyValue(this.params,"name","origin");return isDefined(e)&&isDefined(t)?(this.name=e.data,this.origin=t.data,this.receiveMessage=function(e){e.origin===document.location.origin&&(e.data.messenger!==FramerMessengerType||e.data.target!==this.name&&"undefined"!=typeof e.data.target||this.handleMessage(e.data))}.bind(this),void window.parent.window.addEventListener("message",this.receiveMessage,!1)):void console.info("Manager will not work without the correct origin and name url args")}function FrameMessage(e,t,n,r,a){this.type=e,this.data=t,this.origin=n,this.target=r,this.messenger=a}function createUrlArgs(e){var t=[],n=Object.getOwnPropertyNames(e);return n.forEach(function(n){var r=n+"="+encodeURI(e[n]);t.push(r)}),t.join("&")}function mergeOptions(e,t){var n=Object.getOwnPropertyNames(t);n.forEach(function(n){"undefined"==typeof e[n]&&(e[n]=t[n])})}function filterByKeyValue(e,t,n,r){var a,o=e.filter(function(e){return e[t]===n});if(o.length>0){var s=0;r&&(s=o.length-1),a=o[s]}return a}function parseParams(e){e=e||resolveHashSearch();var t=[],n=parseUris(e);for(var r in n)t.push({name:r,data:n[r]});return t}function resolveHashSearch(){if(""!==document.location.search)return document.location.search;var e=document.location.hash,t=e.substring(e.indexOf("?")+1,e.length);return t}function tryDecodeURIComponent(e){try{return decodeURIComponent(e)}catch(t){console.error("There was an issue parsing the uri segment, check your iframe src",t)}}function parseUris(e){e=e.replace(/^\?/,"");for(var t,n,r={},a=(e||"").split("&"),o=0;o<a.length;o++){var s=a[o];if(s&&(t=s.replace(/\+/g,"%20").split("="),n=tryDecodeURIComponent(t[0]),isDefined(n))){var i=isDefined(t[1])?tryDecodeURIComponent(t[1]):!0;hasOwnProperty.call(r,n)?isArray(r[n])?r[n].push(i):r[n]=[r[n],i]:r[n]=i}}return r}function prependElement(e,t){return e.insertBefore(t,e.firstChild)}function setElementStyles(e,t){for(var n in t)e.style[n]=t[n]}function setElementAttributes(e,t){for(var n in t)e.setAttribute(n,t[n]);return e}function elementExistsByClassName(e){var t=window.document.getElementsByClassName(e);return t.length>0}function isDefined(e){return"undefined"!=typeof e}function domLog(e,t){var n="dom-log",r=document.getElementsByClassName(n)[0];r||(r=document.createElement("div"),r.className=n,r.style.position="absolute",r.style.top="0",r.style.right="0",prependElement(window.document.body,r));var a=document.createElement("p");a.innerText=e,a.style.color=t,a.style.fontSize="0.5em",r.appendChild(a)}window.framer={Manager:Manager,Client:Client,domLog:domLog};var FramerClientMessengerType="frame-client",FramerMessengerType="framer";Manager.prototype.send=function(e,t,n){var r=new FrameMessage(e,t,this.name,n,FramerMessengerType);window.postMessage(r,document.location.origin)},Manager.prototype.receive=function(e,t){filterByKeyValue(this.handlers,"type",e)?console.error("You already have a callback for type",e):this.handlers.push({type:e,callback:t})},Manager.prototype.add=function(e,t,n){var r=filterByKeyValue(this.frames,"name",e);if(r)return console.warn("Manager.add() there is already a frame named",e,"in the framer",this.name),r;n=n||{},isDefined(n.style)||(n.style=this.style),isDefined(n.append)||(n.append=!0);var a=new Frame(FramerClientMessengerType,e,t,n);return this.frames.push(a),a},Manager.prototype.open=function(e,t){var n=this.getFrame(e);return n?(this.focus&&this.focus!==n&&this.closeFrame(this.focus),this.focus=n,t&&mergeOptions(this.focus.options,t),this.openFrame(this.focus),n):void console.error("Manager open() there is no frame with that name",e)},Manager.prototype.openAbove=function(e,t){t=t||{},t.style=t.style||{};var n=this.getFrame(e);return n?(t.style.zIndex||(t.style.zIndex=n.style.zIndex+1),this.openFrame(n,t),n):void console.error("Manager open() there is no frame with that name",e)},Manager.prototype.close=function(e){var t=this.getFrame(e);return t?(this.closeFrame(t),void(this.focus=null)):void console.warn("Manager close() there is no frame with that name",e)},Manager.prototype.handleMessage=function(e){var t=filterByKeyValue(this.handlers,"type",e.type);t&&t.callback.apply(this,[e.data])},Manager.prototype.openFrame=function(e,t){if(t&&mergeOptions(e.options,t),e.frameElement)console.warn("Manager",this.name,"already has",e.name,"open");else if(this.createFrameElement(e),e.options.append){var n=this.container;e.options.parent&&(n=e.options.parent),prependElement(n,e.frameElement)}},Manager.prototype.closeFrame=function(e){if(e.frameElement){var t=e.frameElement.contentWindow;console.log("frame options",e.options),e.options.angularAppId&&t.angular?angularCloseFrameWindow(e):closeFrameWindow(e)}else console.warn("Manager",this.name,"frame",e.name,"is not open to close")},Manager.prototype.getFrame=function(e){var t;return"string"==typeof e?t=this.getFrameByName(e):Object.getOwnPropertyNames(e).name&&(t=this.frames.indexOf(e)),t},Manager.prototype.getFrameByName=function(e){var t,n=this.frames.filter(function(t){return t.name===e});return n.length>0&&(t=n[0]),t},Manager.prototype.createFrameElement=function(e){var t=e.src,n=e.options;n.arguments=n.arguments||{},n.style=n.style||{},n.attributes=n.attributes||{};var r=createUrlArgs(n.arguments),a="&name="+e.name+"&"+r,o="?origin="+encodeURIComponent(document.location.href),s=document.createElement("iframe");return setElementStyles(s,n.style),setElementAttributes(s,n.attributes),s.id=e.name,s.src=t+o+a,s.sandbox="allow-forms allow-scripts allow-same-origin",e.frameElement=s,e},Client.prototype.handleMessage=function(e){var t=filterByKeyValue(this.handlers,"type",e.type);t&&t.callback.apply(this,[e.data])},Client.prototype.send=function(e,t,n){var r=new FrameMessage(e,t,this.name,n,FramerClientMessengerType);window.parent.postMessage(r,this.origin)},Client.prototype.receive=function(e,t){filterByKeyValue(this.handlers,"type",e)?console.error("You already have a callback for type",name):this.handlers.push({type:e,callback:t})},Manager.prototype.createFrameContainer=function(e){var t;return elementExistsByClassName(e)||(t=window.document.createElement("div"),t.className=e,t.style.position="fixed",t.style.top=0,t.style.left=0,t.style.zIndex=this.zIndex,prependElement(window.document.body,t)),t};


})(window);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNsaWVudC5qcyIsIkZyYW1lci5qcyIsIk1hbmFnZXIuanMiLCJ1dGlsLmpzIl0sIm5hbWVzIjpbIk1hbmFnZXIiLCJuYW1lIiwidGhpcyIsImZyYW1lcyIsImhhbmRsZXJzIiwiZm9jdXMiLCJ6SW5kZXgiLCJjb250YWluZXIiLCJjcmVhdGVGcmFtZUNvbnRhaW5lciIsInN0eWxlIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwiYm90dG9tIiwicmlnaHQiLCJ3aWR0aCIsImhlaWdodCIsImJvcmRlciIsIm1hcmdpbiIsInBhZGRpbmciLCJvdmVyZmxvdyIsInJlY2VpdmVNZXNzYWdlIiwiZXZlbnQiLCJvcmlnaW4iLCJkb2N1bWVudCIsImxvY2F0aW9uIiwiZGF0YSIsIm1lc3NlbmdlciIsIkZyYW1lckNsaWVudE1lc3NlbmdlclR5cGUiLCJ0YXJnZXQiLCJoYW5kbGVNZXNzYWdlIiwiYmluZCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhbmd1bGFyQ2xvc2VGcmFtZVdpbmRvdyIsImZyYW1lIiwiZGVzdHJveUFsbFNjb3BlcyIsInJvb3RTY29wZSIsImluamVjdG9yIiwiZ2V0IiwiJGJyb2FkY2FzdCIsInNldFRpbWVvdXQiLCJjbG9zZUZyYW1lV2luZG93IiwiY2hpbGRXaW5kb3ciLCJmcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwibmdBcHAiLCJhbmd1bGFyIiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwib3B0aW9ucyIsImFuZ3VsYXJBcHBJZCIsImNvbnNvbGUiLCJsb2ciLCJzcmMiLCJleCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInVuZGVmaW5lZCIsIkZyYW1lIiwidHlwZSIsIkNsaWVudCIsInBhcmFtcyIsInBhcnNlUGFyYW1zIiwiZmlsdGVyQnlLZXlWYWx1ZSIsImlzRGVmaW5lZCIsIkZyYW1lck1lc3NlbmdlclR5cGUiLCJwYXJlbnQiLCJpbmZvIiwiRnJhbWVNZXNzYWdlIiwiY3JlYXRlVXJsQXJncyIsImFyZ3MiLCJhcmdzTGlzdCIsInByb3BlcnRpZXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9yRWFjaCIsImVuY29kZWRBcmciLCJlbmNvZGVVUkkiLCJwdXNoIiwiam9pbiIsIm1lcmdlT3B0aW9ucyIsImV4aXN0aW5nIiwiY3VzdG9tIiwia2V5cyIsImtleSIsImNvbGxlY3Rpb24iLCJ2YWx1ZSIsImxhc3QiLCJuZWVkbGUiLCJyZXN1bHQiLCJmaWx0ZXIiLCJpdGVtIiwibGVuZ3RoIiwicmVzdWx0SW5kZXgiLCJoYXNoIiwicmVzb2x2ZUhhc2hTZWFyY2giLCJwYXJhbWV0ZXJzIiwic2VnbWVudHMiLCJwYXJzZVVyaXMiLCJzZWFyY2giLCJzdHJpcHBlZEhhc2giLCJzdWJzdHJpbmciLCJpbmRleE9mIiwidHJ5RGVjb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXJyb3IiLCJrZXlWYWx1ZSIsInJlcGxhY2UiLCJzZWdtZW50UmVzdWx0cyIsInNwbGl0IiwiaSIsImtWYWx1ZSIsInZhbCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImlzQXJyYXkiLCJwcmVwZW5kRWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwic2V0RWxlbWVudFN0eWxlcyIsInN0eWxlcyIsInNldEVsZW1lbnRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImVsZW1lbnRFeGlzdHNCeUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImV4aXN0aW5nRWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZG9tTG9nIiwibWVzc2FnZSIsImNvbG9yIiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJsb2dNZXNzYWdlIiwiaW5uZXJUZXh0IiwiZm9udFNpemUiLCJhcHBlbmRDaGlsZCIsImZyYW1lciIsInByb3RvdHlwZSIsInNlbmQiLCJwb3N0TWVzc2FnZSIsInJlY2VpdmUiLCJjYWxsYmFjayIsImFkZCIsIndhcm4iLCJhcHBlbmQiLCJvcGVuIiwiZ2V0RnJhbWUiLCJjbG9zZUZyYW1lIiwib3BlbkZyYW1lIiwib3BlbkFib3ZlIiwiY2xvc2UiLCJhcHBseSIsImNyZWF0ZUZyYW1lRWxlbWVudCIsImV4aXN0aW5nRnJhbWUiLCJnZXRGcmFtZUJ5TmFtZSIsImFyZ3VtZW50cyIsImVuY29kZVVSSUNvbXBvbmVudCIsImhyZWYiLCJpZnJhbWUiLCJpZCIsInNhbmRib3giXSwibWFwcGluZ3MiOiJBQUFBO0FDZ0JBLFFBQVNBLFNBQVFDLEdBQ2JDLEtBQUtELEtBQU9BLEVBQ1pDLEtBQUtDLFVBQ0xELEtBQUtFLFlBQ0xGLEtBQUtHLE1BQVEsS0FDYkgsS0FBS0ksT0FBUyxNQUNkSixLQUFLSyxVQUFZTCxLQUFLTSxxQkFBcUJOLEtBQUtELE1BR2hEQyxLQUFLTyxPQUNEQyxTQUFVLFFBQ1ZDLElBQUssTUFDTEMsS0FBTSxNQUNOQyxPQUFRLE1BQ1JDLE1BQU8sTUFDUEMsTUFBTyxPQUNQQyxPQUFRLE9BQ1JDLE9BQVEsT0FDUkMsT0FBUSxJQUNSQyxRQUFTLElBQ1RDLFNBQVUsVUFHZGxCLEtBQUttQixlQUFpQixTQUFVQyxHQUN4QkEsRUFBTUMsU0FBV0MsU0FBU0MsU0FBU0YsU0FJbkNELEVBQU1JLEtBQUtDLFlBQWNDLDJCQUN4Qk4sRUFBTUksS0FBS0csU0FBVzNCLEtBQUtELE1BQXFDLG1CQUF0QnFCLEdBQU1JLEtBQUtHLFFBQ3REM0IsS0FBSzRCLGNBQWNSLEVBQU1JLFFBRS9CSyxLQUFLN0IsTUFFUDhCLE9BQU9DLGlCQUFpQixVQUFXL0IsS0FBS21CLGdCQUFnQixHQWtLNUQsUUFBU2EseUJBQXdCQyxHQVE3QixRQUFTQyxLQUNMLEdBQUlDLEdBQVlDLEVBQVNDLElBQUksYUFDN0JGLEdBQVVHLFdBQVcsWUFDckJDLFdBQVcsV0FDUEMsaUJBQWlCUCxJQUNsQixHQVpQLEdBQUlRLEdBQWNSLEVBQU1TLGFBQWFDLGNBQ2pDQyxFQUFRSCxFQUFZSSxRQUFRQyxRQUFRTCxFQUFZbkIs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OURJLFFBQU9tQyxPQUFPNEUsWUFBWVgsRUFBU2xJLEtBQUtxQixTQUc1Q3NDLE9BQU9nRixVQUFVRyxRQUFVLFNBQVVwRixFQUFNcUYsR0FDbENqRixpQkFBaUI5RCxLQUFLRSxTQUFVLE9BQVF3RCxHQU16Q1IsUUFBUXNELE1BQU0sdUNBQXdDekcsTUFMdERDLEtBQUtFLFNBQVMyRSxNQUNWbkIsS0FBTUEsRUFDTnFGLFNBQVVBLEtBT3RCakosUUFBUTZJLFVBQVVySSxxQkFBdUIsU0FBVXdILEdBQy9DLEdBQUl6SCxFQVVKLE9BVEt3SCwwQkFBeUJDLEtBQzFCekgsRUFBWXlCLE9BQU9SLFNBQVM4RyxjQUFjLE9BQzFDL0gsRUFBVXlILFVBQVlBLEVBQ3RCekgsRUFBVUUsTUFBTUMsU0FBVyxRQUMzQkgsRUFBVUUsTUFBTUUsSUFBTSxFQUN0QkosRUFBVUUsTUFBTUcsS0FBTyxFQUN2QkwsRUFBVUUsTUFBTUgsT0FBU0osS0FBS0ksT0FDOUIrRyxlQUFlckYsT0FBT1IsU0FBUytHLEtBQU1oSSxJQUVsQ0E7QUN4V1g7QUNBQSIsImZpbGUiOiJmcmFtZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIiwid2luZG93LmZyYW1lciA9IHtcclxuICAgIE1hbmFnZXI6IE1hbmFnZXIsXHJcbiAgICBDbGllbnQ6IENsaWVudCxcclxuICAgIGRvbUxvZzogZG9tTG9nXHJcbn07XHJcblxyXG52YXIgRnJhbWVyQ2xpZW50TWVzc2VuZ2VyVHlwZSA9ICdmcmFtZS1jbGllbnQnO1xyXG52YXIgRnJhbWVyTWVzc2VuZ2VyVHlwZSA9ICdmcmFtZXInO1xyXG5cclxuLyoqXHJcbiAqIE1hbmFnZXIgaXMgdGhlIG1hbmFnZXIgb2YgYSBzZXQgb2YgaWZyYW1lL3dlYnZpZXcgZWxlbWVudHNcclxuICogdGhhdCBjYW4gY29tbXVuaWNhdGUgd2l0aCBzZW5kIGFuZCByZWNlaXZlLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIE1hbmFnZXIobmFtZSkge1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuZnJhbWVzID0gW107XHJcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XHJcbiAgICB0aGlzLmZvY3VzID0gbnVsbDtcclxuICAgIHRoaXMuekluZGV4ID0gOTk5OTk7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuY3JlYXRlRnJhbWVDb250YWluZXIodGhpcy5uYW1lKTtcclxuICAgIC8vIFRoZSBkZWZhdWx0IHN0eWxlIHdpbGwgbWFrZSB0aGUgZnJhbWVzIGZ1bGxzY3JlZW4gYXMgaWYgdGhpcyBpcyBhXHJcbiAgICAvLyBzaW5nbGUgZnJhbWUgYXBwbGljYXRpb24gOylcclxuICAgIHRoaXMuc3R5bGUgPSB7XHJcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXHJcbiAgICAgICAgdG9wOiAnMHB4JyxcclxuICAgICAgICBsZWZ0OiAnMHB4JyxcclxuICAgICAgICBib3R0b206ICcwcHgnLFxyXG4gICAgICAgIHJpZ2h0OiAnMHB4JyxcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxyXG4gICAgICAgIGJvcmRlcjogJ25vbmUnLFxyXG4gICAgICAgIG1hcmdpbjogJzAnLFxyXG4gICAgICAgIHBhZGRpbmc6ICcwJyxcclxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZWNlaXZlTWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGlmIChldmVudC5vcmlnaW4gIT09IGRvY3VtZW50LmxvY2F0aW9uLm9yaWdpbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQuZGF0YS5tZXNzZW5nZXIgPT09IEZyYW1lckNsaWVudE1lc3NlbmdlclR5cGUgJiZcclxuICAgICAgICAgICAgKGV2ZW50LmRhdGEudGFyZ2V0ID09PSB0aGlzLm5hbWUgfHwgdHlwZW9mIGV2ZW50LmRhdGEudGFyZ2V0ID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVNZXNzYWdlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH0uYmluZCh0aGlzKTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMucmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlbmQgYSBtZXNzYWdlIHRvIGEgQ2xpZW50LCBpZiBubyB0YXJnZXQgaXMgc3BlY2lmaWVkIHNlbmQgdG8gYWxsLlxyXG4gKiBAcGFyYW0gdHlwZSB0aGUgbWVzc2FnZSB0eXBlIHRvIHVzZSBiYXNlZCB0aGF0IGRlc2NyaWJlcyB0aGUgZmVhdHVyZSwgZWcgc3VibWl0LCBzZW5kLCBsb2dvdXRcclxuICogQHBhcmFtIGRhdGEgdGhlIG9hdFxyXG4gKiBAcGFyYW0gdGFyZ2V0XHJcbiAqL1xyXG5NYW5hZ2VyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIHRhcmdldCkge1xyXG4gICAgdmFyIG1lc3NhZ2UgPSBuZXcgRnJhbWVNZXNzYWdlKHR5cGUsIGRhdGEsIHRoaXMubmFtZSwgdGFyZ2V0LCBGcmFtZXJNZXNzZW5nZXJUeXBlKTtcclxuICAgIHdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlLCBkb2N1bWVudC5sb2NhdGlvbi5vcmlnaW4pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlY2VpdmUgYSBtZXNzYWdlIG9uIGEgTWFuYWdlciBpbnN0YW5jZS4gVGhlIGNhbGxiYWNrIHdpbGwgcmVjaWV2ZSB0aGUgZGF0YVxyXG4gKiB2YWx1ZSBzZW50IHdpdGggTWFuYWdlci5wcm90b3R5cGUuc2VuZCgpXHJcbiAqIEBwYXJhbSB0eXBlXHJcbiAqIEBwYXJhbSBjYWxsYmFja1xyXG4gKi9cclxuTWFuYWdlci5wcm90b3R5cGUucmVjZWl2ZSA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKCFmaWx0ZXJCeUtleVZhbHVlKHRoaXMuaGFuZGxlcnMsICd0eXBlJywgdHlwZSkpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xyXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignWW91IGFscmVhZHkgaGF2ZSBhIGNhbGxiYWNrIGZvciB0eXBlJywgdHlwZSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkIGEgbmV3IGZyYW1lIHRvIHRoZSBNYW5hZ2VyIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZSB0aGUgdW5pcXVlIG5hbWUgdG8gbWFuYWdlIGFuZCByZWNpZXZlIG1lc3NhZ2VzXHJcbiAqIEBwYXJhbSBzcmMgdGhlIHNyYyB1cmwgdGhhdCBpcyBnaXZlbiB0byB0aGUgaWZyYW1lL3dlYnZpZXdcclxuICogQHBhcmFtIG9wdGlvbnMgYW4gb2JqZWN0IHdpdGggdmFsdWVzIGZvciBzdHlsZSwgYXR0cmlidXRlcyBhbmQgdXJsIGFyZ3VtZW50cyBmb3IgdGhlIHNyY1xyXG4gKiBAcmV0dXJucyB7Kn1cclxuICovXHJcbk1hbmFnZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChuYW1lLCBzcmMsIG9wdGlvbnMpIHtcclxuICAgIHZhciBleGlzdGluZyA9IGZpbHRlckJ5S2V5VmFsdWUodGhpcy5mcmFtZXMsICduYW1lJywgbmFtZSk7XHJcbiAgICBpZiAoZXhpc3RpbmcpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ01hbmFnZXIuYWRkKCkgdGhlcmUgaXMgYWxyZWFkeSBhIGZyYW1lIG5hbWVkJyxcclxuICAgICAgICAgICAgbmFtZSwgJ2luIHRoZSBmcmFtZXInLCB0aGlzLm5hbWUpO1xyXG4gICAgICAgIHJldHVybiBleGlzdGluZztcclxuICAgIH1cclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgIGlmICghaXNEZWZpbmVkKG9wdGlvbnMuc3R5bGUpKSB7XHJcbiAgICAgICAgb3B0aW9ucy5zdHlsZSA9IHRoaXMuc3R5bGU7XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzRGVmaW5lZChvcHRpb25zLmFwcGVuZCkpIHtcclxuICAgICAgICBvcHRpb25zLmFwcGVuZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGZyYW1lID0gbmV3IEZyYW1lKEZyYW1lckNsaWVudE1lc3NlbmdlclR5cGUsIG5hbWUsIHNyYywgb3B0aW9ucyk7XHJcbiAgICB0aGlzLmZyYW1lcy5wdXNoKGZyYW1lKTtcclxuXHJcbiAgICByZXR1cm4gZnJhbWU7XHJcbn07XHJcblxyXG4vKipcclxuICogT3BlbiBhIGZyYW1lIGJ5IG5hbWUgYW5kIGNsb3NlIGFueSBvcGVuZWQgZnJhbWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZVxyXG4gKiBAcGFyYW0gb3B0aW9uc1xyXG4gKi9cclxuTWFuYWdlci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XHJcbiAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldEZyYW1lKG5hbWUpO1xyXG4gICAgaWYgKCFleGlzdGluZykge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hbmFnZXIgb3BlbigpIHRoZXJlIGlzIG5vIGZyYW1lIHdpdGggdGhhdCBuYW1lJywgbmFtZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuZm9jdXMgJiYgdGhpcy5mb2N1cyAhPT0gZXhpc3RpbmcpIHtcclxuICAgICAgICB0aGlzLmNsb3NlRnJhbWUodGhpcy5mb2N1cyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZvY3VzID0gZXhpc3Rpbmc7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICBtZXJnZU9wdGlvbnModGhpcy5mb2N1cy5vcHRpb25zLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIHRoaXMub3BlbkZyYW1lKHRoaXMuZm9jdXMpO1xyXG5cclxuICAgIHJldHVybiBleGlzdGluZztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBPcGVuIGEgZnJhbWUgYnkgbmFtZSBhbmQgaW5zdGVhZCBvZiBjbG9zaW5nIGFueSBvcGVuZWQgZnJhbWVzLFxyXG4gKiB0aGlzIGZyYW1lIHdpbGwgaW5zdGVhZCBvcGVuIGF0IGEgekluZGV4IGFib3ZlIHRoZSBleGlzdGluZyBvcGVuZWQgZnJhbWUuXHJcbiAqXHJcbiAqIEBwYXJhbSBuYW1lXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqL1xyXG5NYW5hZ2VyLnByb3RvdHlwZS5vcGVuQWJvdmUgPSBmdW5jdGlvbiAobmFtZSwgb3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBvcHRpb25zLnN0eWxlID0gb3B0aW9ucy5zdHlsZSB8fCB7fTtcclxuXHJcbiAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldEZyYW1lKG5hbWUpO1xyXG4gICAgaWYgKCFleGlzdGluZykge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hbmFnZXIgb3BlbigpIHRoZXJlIGlzIG5vIGZyYW1lIHdpdGggdGhhdCBuYW1lJywgbmFtZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFvcHRpb25zLnN0eWxlLnpJbmRleCkge1xyXG4gICAgICAgIG9wdGlvbnMuc3R5bGUuekluZGV4ID0gZXhpc3Rpbmcuc3R5bGUuekluZGV4ICsgMTtcclxuICAgIH1cclxuICAgIHRoaXMub3BlbkZyYW1lKGV4aXN0aW5nLCBvcHRpb25zKTtcclxuXHJcbiAgICByZXR1cm4gZXhpc3Rpbmc7XHJcbn07XHJcblxyXG5NYW5hZ2VyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldEZyYW1lKG5hbWUpO1xyXG4gICAgaWYgKCFleGlzdGluZykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignTWFuYWdlciBjbG9zZSgpIHRoZXJlIGlzIG5vIGZyYW1lIHdpdGggdGhhdCBuYW1lJywgbmFtZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jbG9zZUZyYW1lKGV4aXN0aW5nKTtcclxuICAgIHRoaXMuZm9jdXMgPSBudWxsO1xyXG59O1xyXG5cclxuTWFuYWdlci5wcm90b3R5cGUuaGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gZmlsdGVyQnlLZXlWYWx1ZSh0aGlzLmhhbmRsZXJzLCAndHlwZScsIG1lc3NhZ2UudHlwZSk7XHJcbiAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgcmVzdWx0LmNhbGxiYWNrLmFwcGx5KHRoaXMsIFttZXNzYWdlLmRhdGFdKTtcclxuICAgIH1cclxufTtcclxuXHJcbk1hbmFnZXIucHJvdG90eXBlLm9wZW5GcmFtZSA9IGZ1bmN0aW9uIChmcmFtZSwgb3B0aW9ucykge1xyXG4gICAgLy9tZXJnZSBleGlzdGluZyBvcHRpb25zIHdpdGggb3ZlcnJpZGVcclxuICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgbWVyZ2VPcHRpb25zKGZyYW1lLm9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZnJhbWUuZnJhbWVFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVGcmFtZUVsZW1lbnQoZnJhbWUpO1xyXG4gICAgICAgIGlmIChmcmFtZS5vcHRpb25zLmFwcGVuZCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5jb250YWluZXI7XHJcbiAgICAgICAgICAgIGlmIChmcmFtZS5vcHRpb25zLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gZnJhbWUub3B0aW9ucy5wYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJlcGVuZEVsZW1lbnQocGFyZW50LCBmcmFtZS5mcmFtZUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdNYW5hZ2VyJywgdGhpcy5uYW1lLCAnYWxyZWFkeSBoYXMnLCBmcmFtZS5uYW1lLCAnb3BlbicpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuTWFuYWdlci5wcm90b3R5cGUuY2xvc2VGcmFtZSA9IGZ1bmN0aW9uIChmcmFtZSkge1xyXG4gICAgaWYgKGZyYW1lLmZyYW1lRWxlbWVudCkge1xyXG4gICAgICAgIHZhciBjaGlsZFdpbmRvdyA9IGZyYW1lLmZyYW1lRWxlbWVudC5jb250ZW50V2luZG93O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmcmFtZSBvcHRpb25zJywgZnJhbWUub3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKGZyYW1lLm9wdGlvbnMuYW5ndWxhckFwcElkICYmIGNoaWxkV2luZG93LmFuZ3VsYXIpIHtcclxuICAgICAgICAgICAgYW5ndWxhckNsb3NlRnJhbWVXaW5kb3coZnJhbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2xvc2VGcmFtZVdpbmRvdyhmcmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ01hbmFnZXInLCB0aGlzLm5hbWUsICdmcmFtZScsIGZyYW1lLm5hbWUsICdpcyBub3Qgb3BlbiB0byBjbG9zZScpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gYW5ndWxhckNsb3NlRnJhbWVXaW5kb3coZnJhbWUpIHtcclxuICAgIHZhciBjaGlsZFdpbmRvdyA9IGZyYW1lLmZyYW1lRWxlbWVudC5jb250ZW50V2luZG93O1xyXG4gICAgdmFyIG5nQXBwID0gY2hpbGRXaW5kb3cuYW5ndWxhci5lbGVtZW50KGNoaWxkV2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZyYW1lLm9wdGlvbnMuYW5ndWxhckFwcElkKSk7XHJcbiAgICBjb25zb2xlLmxvZygnbmdBcHAnLCBuZ0FwcCk7XHJcblxyXG4gICAgdmFyIGluamVjdG9yID0gY2hpbGRXaW5kb3cuYW5ndWxhci5lbGVtZW50KG5nQXBwKS5pbmplY3RvcigpO1xyXG4gICAgZGVzdHJveUFsbFNjb3BlcygpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRlc3Ryb3lBbGxTY29wZXMoKSB7XHJcbiAgICAgICAgdmFyIHJvb3RTY29wZSA9IGluamVjdG9yLmdldCgnJHJvb3RTY29wZScpO1xyXG4gICAgICAgIHJvb3RTY29wZS4kYnJvYWRjYXN0KFwiJGRlc3Ryb3lcIik7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNsb3NlRnJhbWVXaW5kb3coZnJhbWUpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9zZUZyYW1lV2luZG93KGZyYW1lKSB7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmcmFtZS5mcmFtZUVsZW1lbnQuc3JjID0gJ2Fib3V0OmJsYW5rJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZyYW1lLmZyYW1lRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGZyYW1lLmZyYW1lRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGZyYW1lLmZyYW1lRWxlbWVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9LCAxMDApO1xyXG4gICAgfSwgMCk7XHJcbn1cclxuXHJcbk1hbmFnZXIucHJvdG90eXBlLmdldEZyYW1lID0gZnVuY3Rpb24gKGZyYW1lKSB7XHJcbiAgICB2YXIgZXhpc3RpbmdGcmFtZTtcclxuICAgIGlmICh0eXBlb2YgZnJhbWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgZXhpc3RpbmdGcmFtZSA9IHRoaXMuZ2V0RnJhbWVCeU5hbWUoZnJhbWUpXHJcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZyYW1lKS5uYW1lKSB7XHJcbiAgICAgICAgZXhpc3RpbmdGcmFtZSA9IHRoaXMuZnJhbWVzLmluZGV4T2YoZnJhbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBleGlzdGluZ0ZyYW1lO1xyXG59O1xyXG5cclxuTWFuYWdlci5wcm90b3R5cGUuZ2V0RnJhbWVCeU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgdmFyIGZyYW1lO1xyXG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuZnJhbWVzLmZpbHRlcihmdW5jdGlvbiAoZnJhbWUpIHtcclxuICAgICAgICByZXR1cm4gZnJhbWUubmFtZSA9PT0gbmFtZTtcclxuICAgIH0pO1xyXG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZnJhbWUgPSByZXN1bHRbMF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZyYW1lO1xyXG59O1xyXG5cclxuTWFuYWdlci5wcm90b3R5cGUuY3JlYXRlRnJhbWVFbGVtZW50ID0gZnVuY3Rpb24gKGZyYW1lKSB7XHJcbiAgICB2YXIgc3JjID0gZnJhbWUuc3JjO1xyXG4gICAgdmFyIG9wdGlvbnMgPSBmcmFtZS5vcHRpb25zO1xyXG4gICAgb3B0aW9ucy5hcmd1bWVudHMgPSBvcHRpb25zLmFyZ3VtZW50cyB8fCB7fTtcclxuICAgIG9wdGlvbnMuc3R5bGUgPSBvcHRpb25zLnN0eWxlIHx8IHt9O1xyXG4gICAgb3B0aW9ucy5hdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xyXG4gICAgdmFyIHBhcmFtZXRlcnMgPSBjcmVhdGVVcmxBcmdzKG9wdGlvbnMuYXJndW1lbnRzKTtcclxuICAgIHZhciBwYXJhbXMgPSAnJm5hbWU9JyArIGZyYW1lLm5hbWUgKyAnJicgKyBwYXJhbWV0ZXJzO1xyXG4gICAgdmFyIG9yaWdpbiA9ICc/b3JpZ2luPScgKyBlbmNvZGVVUklDb21wb25lbnQoZG9jdW1lbnQubG9jYXRpb24uaHJlZik7XHJcblxyXG4gICAgLy90b2RvIHdlYnZpZXcgbXMtYXBwLXdlYnZpZXdcclxuICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuXHJcbiAgICBzZXRFbGVtZW50U3R5bGVzKGlmcmFtZSwgb3B0aW9ucy5zdHlsZSk7XHJcbiAgICBzZXRFbGVtZW50QXR0cmlidXRlcyhpZnJhbWUsIG9wdGlvbnMuYXR0cmlidXRlcyk7XHJcblxyXG4gICAgaWZyYW1lLmlkID0gZnJhbWUubmFtZTtcclxuICAgIGlmcmFtZS5zcmMgPSBzcmMgKyBvcmlnaW4gKyBwYXJhbXM7XHJcbiAgICBpZnJhbWUuc2FuZGJveCA9ICdhbGxvdy1mb3JtcyBhbGxvdy1zY3JpcHRzIGFsbG93LXNhbWUtb3JpZ2luJztcclxuICAgIGZyYW1lLmZyYW1lRWxlbWVudCA9IGlmcmFtZTtcclxuXHJcbiAgICByZXR1cm4gZnJhbWU7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBGcmFtZSh0eXBlLCBuYW1lLCBzcmMsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5zcmMgPSBzcmM7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgdGhpcy5mcmFtZUVsZW1lbnQgPSB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENsaWVudCgpIHtcclxuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcclxuXHJcbiAgICB0aGlzLnBhcmFtcyA9IHBhcnNlUGFyYW1zKCk7XHJcbiAgICB2YXIgbmFtZSA9IGZpbHRlckJ5S2V5VmFsdWUodGhpcy5wYXJhbXMsICduYW1lJywgJ25hbWUnLCB0cnVlKTtcclxuICAgIHZhciBvcmlnaW4gPSBmaWx0ZXJCeUtleVZhbHVlKHRoaXMucGFyYW1zLCAnbmFtZScsICdvcmlnaW4nKTtcclxuICAgIGlmICghaXNEZWZpbmVkKG5hbWUpIHx8ICFpc0RlZmluZWQob3JpZ2luKSkge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbygnTWFuYWdlciB3aWxsIG5vdCB3b3JrIHdpdGhvdXQgdGhlIGNvcnJlY3Qgb3JpZ2luIGFuZCBuYW1lIHVybCBhcmdzJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5uYW1lID0gbmFtZS5kYXRhO1xyXG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW4uZGF0YTtcclxuXHJcbiAgICB0aGlzLnJlY2VpdmVNZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbiAhPT0gZG9jdW1lbnQubG9jYXRpb24ub3JpZ2luKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChldmVudC5kYXRhLm1lc3NlbmdlciA9PT0gRnJhbWVyTWVzc2VuZ2VyVHlwZSAmJlxyXG4gICAgICAgICAgICAoZXZlbnQuZGF0YS50YXJnZXQgPT09IHRoaXMubmFtZSB8fCB0eXBlb2YgZXZlbnQuZGF0YS50YXJnZXQgPT09ICd1bmRlZmluZWQnKSkge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZU1lc3NhZ2UoZXZlbnQuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgIHdpbmRvdy5wYXJlbnQud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLnJlY2VpdmVNZXNzYWdlLCBmYWxzZSk7XHJcbn1cclxuXHJcbkNsaWVudC5wcm90b3R5cGUuaGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gZmlsdGVyQnlLZXlWYWx1ZSh0aGlzLmhhbmRsZXJzLCAndHlwZScsIG1lc3NhZ2UudHlwZSk7XHJcbiAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgcmVzdWx0LmNhbGxiYWNrLmFwcGx5KHRoaXMsIFttZXNzYWdlLmRhdGFdKTtcclxuICAgIH1cclxufTtcclxuXHJcbkNsaWVudC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCB0YXJnZXQpIHtcclxuICAgIHZhciBtZXNzYWdlID0gbmV3IEZyYW1lTWVzc2FnZSh0eXBlLCBkYXRhLCB0aGlzLm5hbWUsIHRhcmdldCwgRnJhbWVyQ2xpZW50TWVzc2VuZ2VyVHlwZSk7XHJcbiAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRoaXMub3JpZ2luKTtcclxufTtcclxuXHJcbkNsaWVudC5wcm90b3R5cGUucmVjZWl2ZSA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKCFmaWx0ZXJCeUtleVZhbHVlKHRoaXMuaGFuZGxlcnMsICd0eXBlJywgdHlwZSkpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xyXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignWW91IGFscmVhZHkgaGF2ZSBhIGNhbGxiYWNrIGZvciB0eXBlJywgbmFtZSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5NYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVGcmFtZUNvbnRhaW5lciA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgIHZhciBjb250YWluZXI7XHJcbiAgICBpZiAoIWVsZW1lbnRFeGlzdHNCeUNsYXNzTmFtZShjbGFzc05hbWUpKSB7XHJcbiAgICAgICAgY29udGFpbmVyID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuICAgICAgICBjb250YWluZXIuc3R5bGUudG9wID0gMDtcclxuICAgICAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IDA7XHJcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnpJbmRleCA9IHRoaXMuekluZGV4O1xyXG4gICAgICAgIHByZXBlbmRFbGVtZW50KHdpbmRvdy5kb2N1bWVudC5ib2R5LCBjb250YWluZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcclxufTtcclxuXHJcbmZ1bmN0aW9uIEZyYW1lTWVzc2FnZSh0eXBlLCBkYXRhLCBvcmlnaW4sIHRhcmdldCwgbWVzc2VuZ2VyKSB7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xyXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICB0aGlzLm1lc3NlbmdlciA9IG1lc3NlbmdlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVXJsQXJncyhhcmdzKSB7XHJcbiAgICB2YXIgYXJnc0xpc3QgPSBbXTtcclxuICAgIHZhciBwcm9wZXJ0aWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJncyk7XHJcblxyXG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIHByb3BlcnR5UmVzb2x2ZXIobmFtZSkge1xyXG4gICAgICAgIHZhciBlbmNvZGVkQXJnID0gbmFtZSArICc9JyArIGVuY29kZVVSSShhcmdzW25hbWVdKTtcclxuICAgICAgICBhcmdzTGlzdC5wdXNoKGVuY29kZWRBcmcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFyZ3NMaXN0LmpvaW4oJyYnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKGV4aXN0aW5nLCBjdXN0b20pIHtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VzdG9tKTtcclxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBleGlzdGluZ1trZXldID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBleGlzdGluZ1trZXldID0gY3VzdG9tW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbHRlckJ5S2V5VmFsdWUoY29sbGVjdGlvbiwga2V5LCB2YWx1ZSwgbGFzdCkge1xyXG4gICAgdmFyIG5lZWRsZTtcclxuICAgIHZhciByZXN1bHQgPSBjb2xsZWN0aW9uLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtW2tleV0gPT09IHZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdEluZGV4ID0gMDtcclxuICAgICAgICBpZiAobGFzdCkge1xyXG4gICAgICAgICAgICByZXN1bHRJbmRleCA9IHJlc3VsdC5sZW5ndGggLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZWVkbGUgPSByZXN1bHRbcmVzdWx0SW5kZXhdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5lZWRsZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VQYXJhbXMoaGFzaCkge1xyXG4gICAgaGFzaCA9IGhhc2ggfHwgcmVzb2x2ZUhhc2hTZWFyY2goKTtcclxuICAgIHZhciBwYXJhbWV0ZXJzID0gW107XHJcblxyXG4gICAgdmFyIHNlZ21lbnRzID0gcGFyc2VVcmlzKGhhc2gpO1xyXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzZWdtZW50cykge1xyXG4gICAgICAgIHBhcmFtZXRlcnMucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIGRhdGE6IHNlZ21lbnRzW25hbWVdXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhcmFtZXRlcnM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc29sdmVIYXNoU2VhcmNoKCkge1xyXG4gICAgaWYgKGRvY3VtZW50LmxvY2F0aW9uLnNlYXJjaCAhPT0gJycpIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgaGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2g7XHJcbiAgICAgICAgdmFyIHN0cmlwcGVkSGFzaCA9IGhhc2guc3Vic3RyaW5nKGhhc2guaW5kZXhPZignPycpICsgMSwgaGFzaC5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiBzdHJpcHBlZEhhc2g7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignVGhlcmUgd2FzIGFuIGlzc3VlIHBhcnNpbmcgdGhlIHVyaSBzZWdtZW50LCBjaGVjayB5b3VyIGlmcmFtZSBzcmMnLCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlVXJpcyhrZXlWYWx1ZSkge1xyXG4gICAga2V5VmFsdWUgPSBrZXlWYWx1ZS5yZXBsYWNlKC9eXFw/LywgJycpO1xyXG4gICAgdmFyIHNlZ21lbnRSZXN1bHRzID0ge30sIHZhbHVlLCBrZXk7XHJcbiAgICB2YXIgc2VnbWVudHMgPSAoa2V5VmFsdWUgfHwgXCJcIikuc3BsaXQoJyYnKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIga1ZhbHVlID0gc2VnbWVudHNbaV07XHJcbiAgICAgICAgaWYgKGtWYWx1ZSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGtWYWx1ZS5yZXBsYWNlKC9cXCsvZywgJyUyMCcpLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIGtleSA9IHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZVswXSk7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IGlzRGVmaW5lZCh2YWx1ZVsxXSkgPyB0cnlEZWNvZGVVUklDb21wb25lbnQodmFsdWVbMV0pIDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChzZWdtZW50UmVzdWx0cywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRSZXN1bHRzW2tleV0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoc2VnbWVudFJlc3VsdHNba2V5XSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50UmVzdWx0c1trZXldLnB1c2godmFsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudFJlc3VsdHNba2V5XSA9IFtzZWdtZW50UmVzdWx0c1trZXldLCB2YWxdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlZ21lbnRSZXN1bHRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcmVwZW5kRWxlbWVudChwYXJlbnRFbGVtZW50LCBlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gcGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgcGFyZW50RWxlbWVudC5maXJzdENoaWxkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0RWxlbWVudFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcclxuICAgIGZvciAodmFyIHN0eWxlIGluIHN0eWxlcykge1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGVbc3R5bGVdID0gc3R5bGVzW3N0eWxlXTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0RWxlbWVudEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xyXG4gICAgZm9yICh2YXIgYXR0cmlidXRlIGluIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIGF0dHJpYnV0ZXNbYXR0cmlidXRlXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxufVxyXG5cclxuZnVuY3Rpb24gZWxlbWVudEV4aXN0c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSkge1xyXG4gICAgdmFyIGV4aXN0aW5nRWxlbWVudHMgPSB3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWUpO1xyXG4gICAgcmV0dXJuIGV4aXN0aW5nRWxlbWVudHMubGVuZ3RoID4gMDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJztcclxufVxyXG5cclxuLyoqXHJcbiAqIFNpbXBsZSB1dGlsaXR5IHRvIGxvZyBtZXNzYWdlcyB0byB0aGUgZG9tLlxyXG4gKiBAcGFyYW0gbWVzc2FnZVxyXG4gKiBAcGFyYW0gY29sb3JcclxuICovXHJcbmZ1bmN0aW9uIGRvbUxvZyhtZXNzYWdlLCBjb2xvcikge1xyXG4gICAgdmFyIGNsYXNzTmFtZSA9ICdkb20tbG9nJztcclxuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSlbMF07XHJcbiAgICBpZiAoIWNvbnRhaW5lcikge1xyXG4gICAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICBjb250YWluZXIuc3R5bGUudG9wID0gJzAnO1xyXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5yaWdodCA9ICcwJztcclxuICAgICAgICBwcmVwZW5kRWxlbWVudCh3aW5kb3cuZG9jdW1lbnQuYm9keSwgY29udGFpbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbG9nTWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIGxvZ01lc3NhZ2UuaW5uZXJUZXh0ID0gbWVzc2FnZTtcclxuICAgIGxvZ01lc3NhZ2Uuc3R5bGUuY29sb3IgPSBjb2xvcjtcclxuICAgIGxvZ01lc3NhZ2Uuc3R5bGUuZm9udFNpemUgPSAnMC41ZW0nO1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxvZ01lc3NhZ2UpO1xyXG59IiwiIiwiIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9