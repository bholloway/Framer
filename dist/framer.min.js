/*

 JS Signals <http://millermedeiros.github.com/js-signals/>
 Released under the MIT license
 Author: Miller Medeiros
 Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
*/
(function(i){function h(a,b,c,d,e){this._listener=b;this._isOnce=c;this.context=d;this._signal=a;this._priority=e||0}function g(a,b){if(typeof a!=="function")throw Error("listener is a required param of {fn}() and should be a Function.".replace("{fn}",b));}function e(){this._bindings=[];this._prevParams=null;var a=this;this.dispatch=function(){e.prototype.dispatch.apply(a,arguments)}}h.prototype={active:!0,params:null,execute:function(a){var b;this.active&&this._listener&&(a=this.params?this.params.concat(a):
a,b=this._listener.apply(this.context,a),this._isOnce&&this.detach());return b},detach:function(){return this.isBound()?this._signal.remove(this._listener,this.context):null},isBound:function(){return!!this._signal&&!!this._listener},isOnce:function(){return this._isOnce},getListener:function(){return this._listener},getSignal:function(){return this._signal},_destroy:function(){delete this._signal;delete this._listener;delete this.context},toString:function(){return"[SignalBinding isOnce:"+this._isOnce+
", isBound:"+this.isBound()+", active:"+this.active+"]"}};e.prototype={VERSION:"1.0.0",memorize:!1,_shouldPropagate:!0,active:!0,_registerListener:function(a,b,c,d){var e=this._indexOfListener(a,c);if(e!==-1){if(a=this._bindings[e],a.isOnce()!==b)throw Error("You cannot add"+(b?"":"Once")+"() then add"+(!b?"":"Once")+"() the same listener without removing the relationship first.");}else a=new h(this,a,b,c,d),this._addBinding(a);this.memorize&&this._prevParams&&a.execute(this._prevParams);return a},
_addBinding:function(a){var b=this._bindings.length;do--b;while(this._bindings[b]&&a._priority<=this._bindings[b]._priority);this._bindings.splice(b+1,0,a)},_indexOfListener:function(a,b){for(var c=this._bindings.length,d;c--;)if(d=this._bindings[c],d._listener===a&&d.context===b)return c;return-1},has:function(a,b){return this._indexOfListener(a,b)!==-1},add:function(a,b,c){g(a,"add");return this._registerListener(a,!1,b,c)},addOnce:function(a,b,c){g(a,"addOnce");return this._registerListener(a,
!0,b,c)},remove:function(a,b){g(a,"remove");var c=this._indexOfListener(a,b);c!==-1&&(this._bindings[c]._destroy(),this._bindings.splice(c,1));return a},removeAll:function(){for(var a=this._bindings.length;a--;)this._bindings[a]._destroy();this._bindings.length=0},getNumListeners:function(){return this._bindings.length},halt:function(){this._shouldPropagate=!1},dispatch:function(a){if(this.active){var b=Array.prototype.slice.call(arguments),c=this._bindings.length,d;if(this.memorize)this._prevParams=
b;if(c){d=this._bindings.slice();this._shouldPropagate=!0;do c--;while(d[c]&&this._shouldPropagate&&d[c].execute(b)!==!1)}}},forget:function(){this._prevParams=null},dispose:function(){this.removeAll();delete this._bindings;delete this._prevParams},toString:function(){return"[Signal active:"+this.active+" numListeners:"+this.getNumListeners()+"]"}};var f=e;f.Signal=e;typeof define==="function"&&define.amd?define(function(){return f}):typeof module!=="undefined"&&module.exports?module.exports=f:i.signals=
f})(this);
window.framer = {
    managers: [],
    Manager: Manager,
    Client: Client,
    domLog: domLog
};

var ClientMessage = 'client';
var ManagerMessage = 'manager';

function Frame(type, name, src, options) {
    this.type = type;
    this.name = name;
    this.src = src;
    this.options = options;
    this.frameElement = undefined;
}

function FrameMessage(type, data, origin, target, messenger) {
    this.type = type;
    this.data = data;
    this.origin = origin;
    this.target = target;
    this.messenger = messenger;
}
function closeFrameWindow(frame) {
    setTimeout(function () {
        try {
            frame.frameElement.src = 'about:blank';
        }
        catch (ex) {
            // Do nothing
        }
        setTimeout(function () {
            frame.frameElement.parentNode.removeChild(frame.frameElement);
            frame.frameElement = undefined;
        }, 100);
    }, 0);
}

function createUrlArgs(args) {
    var argsList = [];
    var properties = Object.getOwnPropertyNames(args);

    properties.forEach(function propertyResolver(name) {
        var encodedArg = name + '=' + encodeURI(args[name]);
        argsList.push(encodedArg);
    });

    return argsList.join('&');
}

function mergeOptions(existing, custom) {
    var keys = Object.getOwnPropertyNames(custom);
    keys.forEach(function (key) {
        if (typeof existing[key] === 'undefined') {
            existing[key] = custom[key];
        }
    });
}

function filterByKeyValue(collection, key, value, last) {
    var needle;
    var result = collection.filter(function (item) {
        return item[key] === value;
    });

    if (result.length > 0) {
        var resultIndex = 0;
        if (last) {
            resultIndex = result.length - 1;
        }
        needle = result[resultIndex];
    }
    return needle;
}

function parseParams(hash) {
    hash = hash || resolveHashSearch();
    var parameters = [];

    var segments = parseUris(hash);
    for (var name in segments) {
        parameters.push({
            name: name,
            data: segments[name]
        });
    }

    return parameters;
}

function resolveHashSearch() {
    if (document.location.search !== '') {
        return document.location.search;
    } else {
        var hash = document.location.hash;
        var strippedHash = hash.substring(hash.indexOf('?') + 1, hash.length);
        return strippedHash;
    }
}

function tryDecodeURIComponent(value) {
    try {
        return decodeURIComponent(value);
    } catch (error) {
        console.error('There was an issue parsing the uri segment, check your iframe src', error);
    }
}

function parseUris(keyValue) {
    keyValue = keyValue.replace(/^\?/, '');
    var segmentResults = {}, value, key;
    var segments = (keyValue || "").split('&');
    for (var i = 0; i < segments.length; i++) {
        var kValue = segments[i];
        if (kValue) {
            value = kValue.replace(/\+/g, '%20').split('=');
            key = tryDecodeURIComponent(value[0]);
            if (isDefined(key)) {
                var val = isDefined(value[1]) ? tryDecodeURIComponent(value[1]) : true;
                if (!hasOwnProperty.call(segmentResults, key)) {
                    segmentResults[key] = val;
                } else if (isArray(segmentResults[key])) {
                    segmentResults[key].push(val);
                } else {
                    segmentResults[key] = [segmentResults[key], val];
                }
            }
        }
    }
    return segmentResults;
}

function prependElement(parentElement, element) {
    return parentElement.insertBefore(element, parentElement.firstChild);
}

function setElementStyles(element, styles) {
    for (var style in styles) {
        element.style[style] = styles[style];
    }
}

function setElementAttributes(element, attributes) {
    for (var attribute in attributes) {
        element.setAttribute(attribute, attributes[attribute]);
    }
    return element;
}

function elementExistsByClassName(className) {
    var existingElements = window.document.getElementsByClassName(className);
    return existingElements.length > 0;
}

function isDefined(value) {
    return typeof value !== 'undefined';
}

/**
 * Simple utility to log messages to the dom.
 * @param message
 * @param color
 */
function domLog(message, color) {
    var className = 'dom-log';
    var container = document.getElementsByClassName(className)[0];
    if (!container) {
        container = document.createElement('div');
        container.className = className;
        container.style.position = 'absolute';
        container.style.top = '0';
        container.style.right = '0';
        prependElement(window.document.body, container);
    }

    var logMessage = document.createElement('p');
    logMessage.innerText = message;
    logMessage.style.color = color;
    logMessage.style.fontSize = '0.5em';
    container.appendChild(logMessage);
}

/**
 * Manager is the manager of a set of iframe/webview elements
 * that can communicate with send and receive.
 *
 * @param name
 * @constructor
 */
function Manager(name) {
    this.name = name;
    this.frames = [];
    this.handlers = [];
    this.focus = null;
    this.persistentFrame = null;
    this.zIndex = 99999;
    this.container = this.createFrameContainer(this.name);
    // The default style will make the frames fullscreen as if this is a
    // single frame application ;)
    this.style = {
        position: 'fixed',
        top: '0px',
        left: '0px',
        bottom: '0px',
        right: '0px',
        width: '100%',
        height: '100%',
        border: 'none',
        margin: '0',
        padding: '0',
        overflow: 'hidden'
    };

    this.listen();

    var Signal = signals.Signal;
    this.closed = new Signal();
    this.opened = new Signal();

    window.framer.managers.push(this);
}

Manager.prototype.receiveMessage = function (event) {
    if (event.origin !== document.location.origin) {
        return;
    }

    if (event.data.messenger === ClientMessage &&
        (event.data.target === this.name || typeof event.data.target === 'undefined')) {
        this.handleMessage(event.data);
    }
};

Manager.prototype.destroy = function() {
    this.unListen();
};

Manager.prototype.listen = function() {
    this.listener = function(event){
        this.receiveMessage(event);
    }.bind(this);

    window.top.addEventListener('message', this.listener, false);
};

Manager.prototype.unListen = function() {
    window.top.removeEventListener('message', this.listener);
    this.listener = undefined;
};

/**
 * Send a message to a Client, if no target is specified send to all.
 * @param type the message type to use based that describes the feature, eg submit, send, logout
 * @param data the oat
 * @param target
 */
Manager.prototype.send = function (type, data, target) {
    var message = new FrameMessage(type, data, this.name, target, ManagerMessage);
    window.top.postMessage(message, document.location.origin);
};

/**
 * Receive a message on a Manager instance. The callback will recieve the data
 * value sent with Manager.prototype.send()
 * @param type
 * @param callback
 */
Manager.prototype.receive = function (type, callback) {
    if (!filterByKeyValue(this.handlers, 'type', type)) {
        this.handlers.push({
            type: type,
            callback: callback
        });
    } else {
        console.error('You already have a callback for type', type);
    }
};

/**
 * Add a new frame to the Manager instance.
 *
 * @param name the unique name to manage and recieve messages
 * @param src the src url that is given to the iframe/webview
 * @param options an object with values for style, attributes and url arguments for the src
 * @returns {*}
 */
Manager.prototype.add = function (name, src, options) {
    var existing = filterByKeyValue(this.frames, 'name', name);
    if (existing) {
        console.warn('Manager.add() there is already a frame named',
            name, 'in the framer', this.name);
        return existing;
    }
    options = options || {};

    if (!isDefined(options.style)) {
        options.style = this.style;
    }
    if (!isDefined(options.append)) {
        options.append = true;
    }
    if (!isDefined(options.persistent)) {
        options.persistent = true;
    }

    var frame = new Frame(ClientMessage, name, src, options);
    this.frames.push(frame);

    return frame;
};

/**
 * Open a frame by name and close any opened frames.
 *
 * @param name
 * @param options
 */
Manager.prototype.open = function (name, options) {
    var existing = this.getFrame(name);
    if (!existing) {
        console.error('Manager open() there is no frame with that name', name);
        return;
    }
    if (this.focus && this.focus !== existing) {
        this.closeFrame(this.focus);
    }
    this.focus = existing;

    if (options) {
        mergeOptions(this.focus.options, options);
    }
    this.openFrame(this.focus);

    this.opened.dispatch(existing);

    return existing;
};

/**
 * Open a frame by name and instead of closing any opened frames,
 * this frame will instead open at a zIndex above the existing opened frame.
 *
 * @param name
 * @param options
 */
Manager.prototype.openAbove = function (name, options) {
    options = options || {};
    options.style = options.style || {};

    var existing = this.getFrame(name);
    if (!existing) {
        console.error('Manager open() there is no frame with that name', name);
        return;
    }
    if (!options.style.zIndex) {
        options.style.zIndex = existing.style.zIndex + 1;
    }
    this.openFrame(existing, options);

    return existing;
};

Manager.prototype.close = function (name) {
    var existing = this.getFrame(name);
    if (!existing) {
        console.warn('Manager close() there is no frame with that name', name);
        return;
    }
    this.closeFrame(existing);
    this.focus = null;

    this.closed.dispatch(existing);
};

Manager.prototype.handleMessage = function (message) {
    var result = filterByKeyValue(this.handlers, 'type', message.type);
    if (result) {
        result.callback.apply(this, [message.data]);
    }
};

Manager.prototype.openFrame = function (frame, options) {
    //merge existing options with override
    if (options) {
        mergeOptions(frame.options, options);
    }

    if(frame.options.persistent) {
        this.setPersistentFrame(frame);

    } else if (!frame.frameElement) {
        this.createFrameElement(frame);
        if (frame.options.append) {
            var parent = this.container;
            if (frame.options.parent) {
                parent = frame.options.parent;
            }
            prependElement(parent, frame.frameElement);
        }
    } else {
        console.warn('Manager', this.name, 'already has', frame.name, 'open');
    }
};

Manager.prototype.closeFrame = function (frame) {
    if(frame.options.persistent && this.persistentFrame !== null) {
        this.persistentFrame.src = 'about:blank';
        this.persistentFrame.style.visibility = 'hidden';

    } else if(frame.frameElement) {
        var childWindow = frame.frameElement.contentWindow;
        console.log('frame options', frame.options);
        //if (frame.options.angularAppId && childWindow.angular) {
        //    angularCloseFrameWindow(frame);
        //}
        //else {
            closeFrameWindow(frame);
        //}
    } else {
        console.warn('Manager', this.name, 'frame', frame.name, 'is not open to close');
    }
};

Manager.prototype.getFrame = function (frame) {
    var existingFrame;
    if (typeof frame === 'string') {
        existingFrame = this.getFrameByName(frame)
    } else if (Object.getOwnPropertyNames(frame).name) {
        existingFrame = this.frames.indexOf(frame);
    }

    return existingFrame;
};

Manager.prototype.getFrameByName = function (name) {
    var frame;
    var result = this.frames.filter(function (frame) {
        return frame.name === name;
    });
    if (result.length > 0) {
        frame = result[0];
    }

    return frame;
};

Manager.prototype.setPersistentFrame = function(frame) {
    if(this.persistentFrame === null) {
        this.persistentFrame = document.createElement('iframe');
        prependElement(this.container, this.persistentFrame);
    }

    var src = frame.src;
    var options = frame.options;
    options.arguments = options.arguments || {};
    options.style = options.style || {};
    options.attributes = options.attributes || {};
    var parameters = createUrlArgs(options.arguments);
    var params = '&name=' + frame.name + '&' + parameters;
    var origin = '?origin=' + encodeURIComponent(document.location.href);

    setElementStyles(this.persistentFrame, options.style);
    setElementAttributes(this.persistentFrame, options.attributes);

    this.persistentFrame.id = frame.name;
    this.persistentFrame.src = src + origin + params;
    this.persistentFrame.style.visibility = 'visible';
    this.persistentFrame.sandbox = 'allow-forms allow-scripts allow-same-origin';
    frame.frameElement = this.persistentFrame;

};

Manager.prototype.createFrameElement = function (frame) {
    var src = frame.src;
    var options = frame.options;
    options.arguments = options.arguments || {};
    options.style = options.style || {};
    options.attributes = options.attributes || {};
    var parameters = createUrlArgs(options.arguments);
    var params = '&name=' + frame.name + '&' + parameters;
    var origin = '?origin=' + encodeURIComponent(document.location.href);

    //todo webview ms-app-webview
    var iframe = document.createElement('iframe');

    setElementStyles(iframe, options.style);
    setElementAttributes(iframe, options.attributes);

    iframe.id = frame.name;
    iframe.src = src + origin + params;
    iframe.sandbox = 'allow-forms allow-scripts allow-same-origin';
    frame.frameElement = iframe;

    return frame;
};



Manager.prototype.createFrameContainer = function (className) {
    var container;
    if (!elementExistsByClassName(className)) {
        container = window.document.createElement('div');
        container.className = className;
        container.style.position = 'fixed';
        container.style.top = 0;
        container.style.left = 0;
        container.style.zIndex = this.zIndex;
        prependElement(window.document.body, container);
    }
    return container;
};
function Client() {
    this.handlers = [];

    this.params = parseParams();
    var name = filterByKeyValue(this.params, 'name', 'name', true);
    var origin = filterByKeyValue(this.params, 'name', 'origin');
    if (!isDefined(name) || !isDefined(origin)) {
        console.info('A Framer Client will not work without the correct origin and name url args, origin and name');
        return;
    }
    this.name = name.data;
    this.origin = origin.data;

    this.listen();
}

Client.prototype.receiveMessage = function (event) {
    if (event &&
        event.origin &&
        event.origin !== window.top.document.location.origin) {
        return;
    }

    if (event.data.messenger === ManagerMessage &&
        (event.data.target === this.name ||
        typeof event.data.target === 'undefined')) {
        this.handleMessage(event.data);
    }
};

Client.prototype.destroy = function() {
    this.unListen();
};

Client.prototype.listen = function() {
    this.listener = function(event){
        this.receiveMessage(event);
    }.bind(this);

    window.top.addEventListener('message', this.listener, false);
};

Client.prototype.unListen = function() {
    window.top.removeEventListener('message', this.listener);
    this.listener = undefined;
};

Client.prototype.handleMessage = function (message) {
    var result = filterByKeyValue(this.handlers, 'type', message.type);
    if (result) {
        result.callback.apply(this, [message.data]);
    }
};

Client.prototype.send = function (type, data, target) {
    var message = new FrameMessage(type, data, this.name, target, ClientMessage);
    window.top.postMessage(message, this.origin);
};

Client.prototype.receive = function (type, callback) {
    if (!filterByKeyValue(this.handlers, 'type', type)) {
        this.handlers.push({
            type: type,
            callback: callback
        });
    } else {
        console.error('You already have a callback for type', name);
    }
};
function angularCloseFrameWindow(frame) {
    var childWindow = frame.frameElement.contentWindow;
    var ngApp = childWindow.angular.element(childWindow.document.getElementById(frame.options.angularAppId));
    console.log('ngApp', ngApp);

    var injector = childWindow.angular.element(ngApp).injector();
    destroyAllScopes();

    function destroyAllScopes() {
        var rootScope = injector.get('$rootScope');
        rootScope.$broadcast("$destroy");
        setTimeout(function () {
            closeFrameWindow(frame);
        }, 0);
    }
}
//# sourceMappingURL=data:application/json;base64,